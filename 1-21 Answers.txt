第1题： 不正确；float类型声明变量时默认是双精度double，而且编译器无法自动向上转型
（因为double的精度比float要高），所以只能进行强制转换float f =3.4f

第2题：引用传递

第3题：某个类被final修饰代表这个类不能被其他类继承，这个类没有子类

第4题：Error与Exception都是Throwable类的子类，Error是系统的错误，一般用于运行时环境的错误，
  虚拟机相关错误。
            Exception是程序的异常，可即时处理，也可以用try--catch捕获然后程序员手动回复异常

第5题：final 是java 中的一个标识符，代表了此类或者此对象无法被继承或者引用不可变
           finally是java的一个语句关键字，和try--catch搭配使用，出现在catch代码块的最后，无论是否有异常，
  finally中的代码总会被执行
           final与finally毫无关系。

第6题：String s = new String("xyz ");
            执行这个语句时，内存中的栈先开辟一个空间分给 s，new的动作发生在堆内存，
  new String开辟一个空间，并被分到一个地址，虚拟机中内存也会有一个方法区，
  方法区创建了一个常量池，常量池里面保存了"xyz "，并且也会被赋予一个地址（指向堆内存）
  并保存在堆内存的new空间里，这样变量s仅仅是通过引用来获得字符串对象xyz 这个值的。
            所以，String s = new String("xyz ");只创建了一个String Object

第7题： short s1=1；s1=s1+1;  错误
              short s1 = 1；这里的s1 是short类型，被赋值为1，s1=s1+1中的1是int类型，=号两边数据类型
              不同，编译器会报错。
            short s1=1；s1+=1； 正确
               这里的s1+=1相当于 short(s1)=short(s1+1);编译器会自动强制转换类型

第8题：通过查阅jdk API 1.8
                 数组是没有length()这个方法的，但是有getlength()来获得返回指定数组对象的长度，int类型。
                 String是有length()这个方法的。

第9题：Overload是方法的重载，指的是一个类中可以有多个方法名相同的方法，但是这些方法的参数列表必须
    不相同才能使用方法重载，但是方法的返回类型，修饰符没有要求是否不相同，其中main方法也可以被重载，在
    main函数中使用方法重载时java会自动选择最相近最合适的参数列表方法。
           Override是 方法的覆盖，如果在一个子类定义了一个方法，子类方法的名称返回类型和参数列表和父类中
    的某一个方法名称返回类型和参数列表相匹配，那么这个时候子类的方法优先覆盖了父类的方法，java优先使用
    子类方法

第10题：abstract class是抽象类，属于Class类的一种
             interface是接口，类似于类，但不是类
             abstract class 类中的方法，可以有也可以没有一般方法的格式和具体实现的功能，interface中的方法无法
    有这些功能，接口只能由抽象方法，而且方法默认public abstract。
             abstract class 中的成员变量可以是属于各种类型的，接口中的成员变量只能是public static final类型的
    接口只能由常量。
              接口中不能含有静态代码块以及静态方法（用static 修饰的方法），abstract class 无限制。一个类只能
    继承一个抽象类，一个类却可以实现多个接口。
              一个实现接口的类必须实现接口内所有方法否则就必须声明为抽象类。

第11题：不可以 因为一般情况下我们编译构造器的名字是与类名相同的，无法被继承，没有继承关系也就无法被重写

第12题：String类不可以被继承
	StringBuilder和StringBuffer类也是不可以被继承的
	还有其他的基本类型包装类如Integer，Double，Long也不可以被继承，
	因为它们都被设计时加入了final修饰符，被final修饰过的类时无法被继承的。



第13题：输出结果为：FatherClass Create                      建立fc时调用父类方产生的结果
		FatherClass Create                      建立cc时系统自动先调用父类构造方法产生的结果，
                                ChildClass Create                        然后再输出子类无参构造方法的结果
		子类不继承父类的构造器/方法/函数，只调用，当父类构造器带参数需要手动在子类构造器中
		显式通过super来调用父类构造器并配适当参数
		题目中的父类式有参构造器，系统会自动调用父类的无参构造器

第14题： 多线程有三种实现方法：1、实现Runnable接口 
			  2、继承Thread接口
			  3、通过Callable和Future创建
	同步有三种实现方法：  1、使用synchronized关键字修饰方法或者代码块
			  2、使用Volatile关键字修饰变量
			  3、在类中加入重入锁
第15题：线程同步方法：1、使用同步关键字synchronized修饰方法或代码块
	                    2、使用关键字volatle修饰共享变量实现伪同步
	                    3、使用重入锁实现线程同步
		    4、使用局部变量实现线程同步

第16题：可以，如果其他方法没有同步的话

第17题：CE   非静态内部类不能有静态成员；静态内部类的非静态成员可以访问外部类的静态成员，不能访问非静态

第18题： String类在运行速度上不如StringBuffer，因为String对象被创建后就会被保存你在常量池中
              无法被更改，StringBuffer的长度时可变的，可以被更改，在拼接操作中更加节省内存空间，
              运行更快。
              String只适用于操作少量字符的情况，StringBuffer使用在多线程下在字符缓冲区进行大量操作

第19题： 添加writeObject()方法来进行序列化，用readObject()方法来进行反序列化，实现Serializable接口

第20题： 需要实现Comparable接口和Comparator接口

第21题：  集合框架是为了高效高能的来实现基本集合，并且可以允许不同类型集合来高度互相操作，并简单适应
             和拓展集合。整个集合框架围绕一组标准接口设计，可以直接使用这些接口的标砖实现也可以通过接口
             实现自己的集合。
	集合框架主要包框两种类型的容器：Collection和Map。Collection有三种子类型，List、Set和Queue，
             再下面就是抽象类，然后是具体实现类。
	集合框架是一个用来代表和操作集合的统一架构，java集合框架提供了一套性能优良，使用方便的接口
             和类；java集合框架位于java.util包中，需要导包
              